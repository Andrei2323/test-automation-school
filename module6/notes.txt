* Best Practices - driver should be put under resources together with src
*         //NOTE - you have to indicate all class names that are specified on the current element
          // This is contrary to CSS Selector where you can specify just one of the class names

* understand that it is not necessary to write
  WebElement elementById = driver.findElement(By.id("search_query_top"));
  elementById.click();
and you can just chain:
driver.findElement(By.name("q")).click();

* understand that it is possible to assign object reference to a variable which it the interface, whichis implemented by the object`s class
or assign to parent class, which is extended by the object`s class
or assign to abstract parent class, which is extended by the object`s class
* understand usage of local var vs field and where they should be used in Junit Test(After -> test)
* return type of a method



* Closing browsers - in AfterMethod or in AfetrClass. also discuss in parallel execution - not possible run parallel if AfterClass is used.

Selenium Grid:
    * each new webdriver initialization creates a new session, whcih in turn
    * show example how to use SwissRe Selenium grid
        * Videos, desiredcapabilities
        * UnreachableBrowserExc SessionNotCreated





*
So if you find yourself with a test suite that hard to maintain,  slow, frequently broken - stop. Think about what are you doing,. Why you are doing this. Could we replicate this level of confidence with smaller tests

only e2e. not all tests need to be Selenium!


"Implicit waits are terrible mistake I have made and I apologize for them!"

Avoid using implicit wait if you possible can, especcialy with Explicit waits


Implicit wait - if  you ask for an element and it`s not there, we`ll wait a little bit in case it`s about to arrive and we handed to you


projtis po IDEA - sprositj chto uze znajut i chto nado znatj!

Page Objects - dont auto generate page objects. Thinks about what they are for
They are for to:
1. Model services that  your pages or components of pages offer
2. Make your tests clearer and easier to maintain

Rule of thumb - don`t expose selenium api`s from it



* Я веду к тому, что "писать testable code" - это прямая обязанность инженера который думает о QA,
о качестве продукта - не важно программист он или автоматизатор. Фронтенд без адекватных атрибутов - это не тестебл код,
который в разы ухудшает эффективность автоматизации - которая и нужна то в первую очередь - именно для программистов -
что бы как можно быстрее давать им фидбек о том - что они там наменяли.


*rasskazatj pro KISS - keep it simple stupid - inoj raz luchshe napisatj prostoj iterator, chem


* rasskazatj pro Паттерны проектирования в автоматизации тестирования - https://habrahabr.ru/company/jugru/blog/338836/

* https://www.youtube.com/watch?v=iX7ptfdpJXY - tipizirovannye elementy
* Simplest fw - selenide - https://www.youtube.com/watch?v=Q7fqTLOr2YE, https://www.youtube.com/watch?v=Q7fqTLOr2YE - kiss - keep it simple stupid, goal is to not to overengineer
*NOTE - ne vsegda knopka javljaetjsa knopkoj v kontektset HTML
ne vsegda input forma javljaetsja formoj v HTML
* balanc mezdu dohodchivymi i abstrktnymi testami -> porog vhozdenija testirovshika (selenide)



* tell about different browsers:
** ff profile
** setting executable env variable
** options



notes from minsk:
* driver.getTitle
* driver.getCurrentUrl
* driver size

* add slides about how to write clean code http://www.garshol.priv.no/blog/105.html

* pokazatj primer s Milanovich incorrect approach

* how to prepare precondition via REST in Selenium - https://github.com/mwinteringham/api-webdriver-harmony/blob/master/src/test/java/BugPageTest.java



* https://github.com/Fulcrum81/SeleniumTraining

* File upload and download example - https://github.com/Fulcrum81/FileUploadDownload
* simple fw with page objects, but without page factory (BY as fields) - https://github.com/Fulcrum81/TestTemplate
* one driver per tests - https://github.com/Fulcrum81/WebDriverSingletonTemplate,https://github.com/Fulcrum81/WebDriverSingletonTemplate/blob/master/src/main/java/base/DriverContainer.java
* putting locators into separate file - https://github.com/Fulcrum81/WebDriverSingletonTemplate/blob/master/src/main/resources/locators.properties, https://github.com/Fulcrum81/WebDriverSingletonTemplate/blob/master/src/main/java/helpers/Locators.java
* working with Tables - https://github.com/Fulcrum81/WebTableExample/blob/master/src/test/java/TableTest.java



sites to automate -
* http://todomvc.com/examples/angularjs/#


* add static